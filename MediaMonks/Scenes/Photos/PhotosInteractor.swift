//
//  PhotosInteractor.swift
//  MediaMonks
//
//  Created by Karim Cordilia on 01/03/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit
import Moya
import RxSwift
import CoreData

protocol PhotosInteractorProtocol {
    func set(albumId: Int)
    func handleViewDidLoad()
    func loadNextPage()
}

class PhotosInteractor: PhotosInteractorProtocol {

    // MARK: DI
    var presenter: PhotosPresenterProtocol
    private let provider: MoyaProvider<PhotoService>!
    private let disposeBag = DisposeBag()

    private var page: Int = 1
    var albumId: Int?

    init(presenter: PhotosPresenterProtocol,
         provider: MoyaProvider<PhotoService>) {
        self.presenter = presenter
        self.provider = provider
    }

    func set(albumId: Int) {
        self.albumId = albumId
    }

    func handleViewDidLoad() {
        guard let albumId = albumId else { return }
        getPhotos(albumId: albumId, page: page)
    }

    func getPhotos(albumId: Int, page: Int) {
        provider.rx
            .request(.getPhotos(albumId: albumId, page: page))
            .filterSuccessfulStatusCodes()
            .map([Photo].self)
            .subscribe { [weak self] photos in
                self?.presenter.presentPhotos(photos: photos)
            } onError: { error in
                print(error)
            }.disposed(by: disposeBag)
    }

    func loadNextPage() {
        page += 1
        guard let albumId = albumId else { return }
        getPhotos(albumId: albumId, page: page)
    }
}

//
//  PhotosViewController.swift
//  MediaMonks
//
//  Created by Karim Cordilia on 01/03/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
//  This template is meant to work with Swinject.

import UIKit

protocol PhotosViewControllerProtocol: UIViewControllerRouting {
    func set(interactor: PhotosInteractorProtocol)
    func set(router: PhotosRouterProtocol)
    func set(albumId: Int)
    func displayPhotos(photos: [Photo])
}

class PhotosViewController: UIViewController, PhotosViewControllerProtocol {
    // MARK: Outlets
    @IBOutlet weak var collectionView: UICollectionView!

    // MARK: Properties
    private let datasource = PhotosDataSource()
    private var animationIndex: [IndexPath] = []

    // MARK: DI
    var interactor: PhotosInteractorProtocol?
    var router: PhotosRouterProtocol?

    func set(interactor: PhotosInteractorProtocol) {
        self.interactor = interactor
    }

    func set(router: PhotosRouterProtocol) {
        self.router = router
    }

    func set(albumId: Int) {
        interactor?.set(albumId: albumId)
    }

    // MARK: Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Photo's"
        interactor?.handleViewDidLoad()
        setupCollectionView()
    }

    // MARK: Methods
    func setupCollectionView() {
        collectionView.register(R.nib.photoCollectionViewCell)
        collectionView.delegate = self
        collectionView.dataSource = datasource
        collectionView.collectionViewLayout = setupCollectionViewLayout()
    }

    func setupCollectionViewLayout() -> UICollectionViewLayout {
        return UICollectionViewCompositionalLayout { _, _ -> NSCollectionLayoutSection? in
            let item = NSCollectionLayoutItem(layoutSize: .init(widthDimension: .fractionalWidth(1/3), heightDimension: .absolute(120)))
            let group = NSCollectionLayoutGroup.horizontal(layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(120)), subitems: [item])
            let section = NSCollectionLayoutSection(group: group)
            return section
        }
    }

    func displayPhotos(photos: [Photo]) {
        datasource.set(photos: photos)
        collectionView.reloadData()
    }

    // MARK: Actions

}

extension PhotosViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.route(to: .photoDetail(photo: datasource.photos[indexPath.row]))
    }

    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if animationIndex.contains(indexPath) == false {
            cell.transform = CGAffineTransform(translationX: 0, y: collectionView.frame.height / 2)
            cell.alpha = 0

            UIView.animate(withDuration: 0.5, delay: 0.05*Double(indexPath.row), options: [.curveEaseInOut], animations: {
                cell.transform = CGAffineTransform(translationX: 0, y: 0)
                cell.alpha = 1
            }, completion: nil)
            animationIndex.append(indexPath)
        }
    }

    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        let height = scrollView.frame.size.height

        if offsetY > contentHeight - height {
            interactor?.loadNextPage()
        }
    }
}

